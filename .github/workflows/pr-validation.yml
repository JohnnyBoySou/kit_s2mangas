name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.15.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for lockfile changes
        run: |
          if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q "pnpm-lock.yaml"; then
            echo "‚úÖ Lockfile updated"
          else
            echo "‚ö†Ô∏è Lockfile not updated - consider running 'pnpm install'"
          fi

      - name: Validate package.json
        run: |
          pnpm validate-package-json || echo "‚ö†Ô∏è Package.json validation failed"

      - name: Check for breaking changes
        run: |
          echo "Checking for breaking changes..."
          # Add your breaking change detection logic here

      - name: Comment on PR
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Validation Results')
            );
            
            const results = {
              lockfile: '${{ steps.check-lockfile.outcome }}',
              packageJson: '${{ steps.validate-package.outcome }}',
              breakingChanges: '${{ steps.check-breaking.outcome }}'
            };
            
            const body = `## PR Validation Results
            
            - **Lockfile**: ${results.lockfile === 'success' ? '‚úÖ Updated' : '‚ö†Ô∏è Not updated'}
            - **Package.json**: ${results.packageJson === 'success' ? '‚úÖ Valid' : '‚ùå Invalid'}
            - **Breaking Changes**: ${results.breakingChanges === 'success' ? '‚úÖ None detected' : '‚ö†Ô∏è Check required'}
            
            ---
            *This comment was automatically generated by the PR validation workflow.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  size-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const additions = pr.additions;
            const deletions = pr.deletions;
            const totalChanges = additions + deletions;
            
            let sizeLabel = '';
            let sizeEmoji = '';
            
            if (totalChanges <= 10) {
              sizeLabel = 'XS';
              sizeEmoji = 'üü¢';
            } else if (totalChanges <= 50) {
              sizeLabel = 'S';
              sizeEmoji = 'üü°';
            } else if (totalChanges <= 250) {
              sizeLabel = 'M';
              sizeEmoji = 'üü†';
            } else if (totalChanges <= 1000) {
              sizeLabel = 'L';
              sizeEmoji = 'üî¥';
            } else {
              sizeLabel = 'XL';
              sizeEmoji = 'üü£';
            }
            
            // Remove existing size labels
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const sizeLabels = labels.filter(label => 
              label.name.startsWith('size/')
            );
            
            for (const label of sizeLabels) {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: label.name
              });
            }
            
            // Add new size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [`size/${sizeLabel}`]
            });
            
            console.log(`${sizeEmoji} PR Size: ${sizeLabel} (${totalChanges} changes)`);
